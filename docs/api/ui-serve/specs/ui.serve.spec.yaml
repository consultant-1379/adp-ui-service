openapi: 3.0.1
info:
  title: UI packages Serve and Metadata REST API (IF.GUI.SERVE.STATIC, IF.GUI.SERVE.PACKAGE.META)
  description: |
    # Introduction

    Interface, provided by GAS backend for GAS frontend (Portal GUI), for exposing and serving UI packages.

    ## Terms

    - **UI Serve Interface**: The interface providing access to static content contributed by Micro-services. All static content paths are relative to this URI.
    - **Package**: A reusable, shared package exposed by a Micro-service. A package can contain one or more ES modules, and can contain static assets (CSS, images, etc.).
    - **ES Module (ESM)**: Part of a package, this is the atomic entity which is loaded by the browser. ES Module specification is based on W3C standards.
      <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules>
    - **Import-Map**: A specific JSON construct which alters the browser ESM resolution logic, by defining string-URL mappings.
      It is based on a standard draft: <https://wicg.github.io/import-maps/>
    - **Reverse-Proxy**: A proxy service which transparently forward requests to other backend services and return responses to the clients.

  contact:
    name: Smart Insights Team
    email: PDLSCRUMNW@pdl.internal.ericsson.com
  version: "1.0.0"
  x-api-id: 6f895a9d-9d15-44bf-ac24-1426e2c38ee0
  x-audience: company-internal
servers:
  - url: /ui-serve/v1
    description: Base
tags:
  - name: IF.GUI.SERVE.STATIC
    description: Static assets exposure API, which implements a full reverse-proxy functionality between UI clients and domain services.
    x-displayName: UI packages (modules) Serve REST API
  - name: IF.GUI.SERVE.PACKAGE.META
    description: Package Meta API, which gives meta information about discovered packages.
    x-displayName: UI packages (modules) Meta REST API
paths:
  /static/{globalUniqueURI}:
    get:
      operationId: fetchStaticAsset
      summary: Fetch static asset
      description: |
        Act as a reverse-proxy and returns a requested static asset from a domain service identified by `globalUniqueURI`.
        This endpoint is used _internally_ by the browser when resolving module identifiers to URLs by using the import-map generated by the `/import-map` API.

        **Note:** the mapping of static assets to globally unique URLs (`globalUniqueURI`) is depending on the actual implementation, which **MIGHT** change in the future.
        This endpoint **SHOULD NOT** be used directly at client side as backward compatibility is not guaranteed in `globalUniqueURI` resolution logic.

        Currently the `globalUniqueURI` contains a unique `serviceId` which identifies a domain service, and `filePath` which is the path to the requested file, relative to
        the root of the webserver serving the static asset for the domain service: `{serviceId}/{filePath}`
      tags:
        - IF.GUI.SERVE.STATIC
      parameters:
        - in: path
          name: globalUniqueURI
          required: true
          schema:
            type: string
          description: The name of a static asset
      responses:
        "200":
          description: OK - The requested static asset
        "400":
          description: Bad Request - Request path doesn't match the pattern or file path is missing
        "404":
          description: Not Found - The requested static asset is not found
        "504":
          description: The target domain service is down, static asset cannot be fetched from it
  /import-map:
    get:
      operationId: getImportMap
      summary: Get import-map
      description: |
        Returns the import-map which is generated from the overall package list fetched from domain services.
        Contains multiple entries for each package, and also defines the scopes based on the required dependencies.

        Each package will have multiple entries to support different ESM import use-cases:
          - `packageName` -> load the main module
          - `packageName/` -> enable loading additional assets: e.g. `packageName/secondModule.js`
          - `packageName@version` -> load the main module from the exact package version
          - `packageName@version/` -> access the exact package version

        Scopes are defined based on the package's dependencies list. The exposed URL to the package folder is used at the scope definitions.

      tags:
        - IF.GUI.SERVE.PACKAGE.META
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "../schemas/ui.import.map.yaml"
              examples:
                importMap:
                  $ref: "#/components/examples/importMap"
        "400":
          description: Bad Request - Path is incorrect
  /list-packages:
    get:
      operationId: getPackagesMap
      summary: Get map of packages
      description: |
        Returns a list of metadata from config.package.json files fetched from domain services.
      tags:
        - IF.GUI.SERVE.PACKAGE.META
      responses:
        "200":
          description: OK
          content:
            application/json:
              examples:
                listPackages:
                  $ref: "#/components/examples/listPackages"
        "400":
          description: Bad Request - Path is incorrect

components:
  schemas:
    config.package.json:
      $ref: "../schemas/ui.config.package.yaml"
  examples:
    importMap:
      summary: A basic example with a base library and an application.
      value:
        imports:
          "@eui/base": /ui-serve/v1/static/domain-1/libs/@eui/libs/2.0.0/main.js
          "@eui/base/": /ui-serve/v1/static/domain-1/libs/@eui/libs/2.0.0/
          "@eui/base@2.0.0": /ui-serve/v1/static/domain-1/libs/@eui/libs/2.0.0/main.js
          "@eui/base@2.0.0/": /ui-serve/v1/static/domain-1/libs/@eui/libs/2.0.0/
          "dashboardApp": /ui-serve/v1/static/domain-2/apps/dashboardApp/dashboardApp.js
          "dashboardApp/": /ui-serve/v1/static/domain-2/apps/dashboardApp/
          "dashboardApp@1.0.0": /ui-serve/v1/static/domain-2/apps/dashboardApp/dashboardApp.js
          "dashboardApp@1.0.0/": /ui-serve/v1/static/domain-2/apps/dashboardApp/
        scopes:
          /ui-serve/v1/static/domain-2/apps/dashboardApp/:
            "@eui/base": /ui-serve/v1/static/domain-2/libs/@eui/libs/1.0.0/main.js
            "@eui/base/": /ui-serve/v1/static/domain-2/libs/@eui/libs/1.0.0/
    listPackages:
      value:
        demo-ui-service-enm:
          name: "demo-ui-service-enm"
          version: "1.0.0-0"
          protocol: "http"
          serviceurl: "demo-ui-service-enm-http:4000"
          ingressBaseurl: "http://enm.demo-ui-service-enm.nip.io/domainapp_enm/"
          uiContentConfigContext: "/other-path"
          uid: "demo-ui-service-enm-1.0.0-0"
          meta:
            modules:
              - name: "app-1"
                version: "1.0.0"
                path: "/apps"
                main: "app-1.js"
              - name: "comp-c"
                version: "3.0.0"
                path: "/components"
                main: "comp-c.js"
                dependencies:
                  framework: "1.1.0"
        demo-ui-service-ecm:
          name: "demo-ui-service-ecm"
          version: "1.0.0-0"
          protocol: "http"
          serviceurl: "demo-ui-service-ecm-http:4000"
          ingressBaseurl: "http://ecm.demo-ui-service-ecm.nip.io/ecm/"
          uiContentConfigContext: "/other-path"
          uid: "demo-ui-service-ecm-1.0.0-0"
          meta:
            modules:
              - name: "app-1"
                version: "1.0.0"
                path: "/apps"
                main: "app-1.js"
    config.package.json:
      value:
        version: 1.0.0
        packages:
          - name: "@eui/base"
            version: 1.3.0
            path: /libs/eui/base/1.3.0
            main: main.js
            serviceId: domain-1
          - name: domainApp
            version: 1.0.0
            path: /apps/domainApp
            main: domainApp.js
            serviceId: domain-1
            dependencies:
              "@eui/base": 1.x.x
          - name: sharedComponent
            version: 2.1.0
            path: /components/sharedComponent/
            main: sharedComponent.js
            serviceId: domain-1
            dependencies:
              "@eui/base": 1.3.0
