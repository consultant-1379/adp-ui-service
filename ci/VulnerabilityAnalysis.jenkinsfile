pipeline {
  agent {
    node {
      label 'presentation'
    }
  }
  parameters {
    string(name: 'GERRIT_REFSPEC', defaultValue: 'refs/heads/master',
      description: 'Gerrit patchset refspec. It is only used if there is change in the ruleset or the Jenkinsfile. The CI chart\'s stage can also be changed with this.')
    string(name: 'HELM_VERSION',
      description: 'The version of the Helm chart that you want to deploy. If unset the newest version is deployed.' +
      'The available versions are listed here: https://arm.epk.ericsson.se/artifactory/proj-eea-drop-helm/eric-adp-gui-aggregator-service/')
    string(name: 'ADDITIONAL_JIRA_MANAGER_PARAMS', defaultValue: '--severity-blacklist "Medium, Low, Informational, info"',
      description: 'Additional parameters for the Jira management tool. Only used if MANAGE_JIRA is set to true.')
    string(name: 'FUZZ_SCAN_MAX_CASES', defaultValue: '"0"',
      description: 'Number of Defensics test cases to run. Using "0" as input will result in running all testcases provided by testplan')
    string(name: 'FUZZ_SCAN_MAX_TIME', defaultValue: '01:00',
      description: 'Maximum execution time for defensics fuzz scan in syntax hours:minutes. Value defined without ":" assumed to be minutes.')
    booleanParam(name: 'UPLOAD_VHUB', defaultValue: false, description: 'Enable vulnerability hub upload (Only ADP general and re-usable services can do that!!)')
    booleanParam(name: 'UPLOAD_ARM', defaultValue: false, description: 'Enable ARM upload (upload every VA scan tool reports and the VA report markdown as well)')
    booleanParam(name: 'UPLOAD_ERIDOC', defaultValue: false, description: 'Enable ERIDOC upload (upload VA report markdown to the ERIDOC)')
    booleanParam(name: 'MANAGE_JIRA', defaultValue: false, description: 'Enable automatic Jira Vulnerability card management')
  }
  options {
    ansiColor('xterm')
    timeout(time: 3, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }
  stages {
    stage('Prepare') {
      steps {
        sh 'bob -r ci/rulesets/va-rules.yaml --dryrun $(bob -r ci/rulesets/va-rules.yaml -lq)'
      }
    }
    stage('Cleanup bob') {
      steps {
        sh 'bob clean'
      }
    }
    stage('Init') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI')]) {
          ansiColor('xterm') {
            sh 'bob -r ci/rulesets/va-rules.yaml init'
          }
        }
      }
    }
    stage('Install GAS') {
      steps {
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([
            usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI'),
            file(credentialsId: env.system, variable: 'KUBECONFIG')
          ]) {
            ansiColor('xterm') {
              sh 'bob -r ci/rulesets/va-rules.yaml deploy-chart'
            }
          }
        }
      }
    }
    stage('Run image scans') {
      parallel {
        stage('Anchore') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              script {
                env.ANCHORE_RESULT = sh(script:'bob -r ci/rulesets/va-rules.yaml anchore-scan', returnStatus: true)
                archiveArtifacts '.bob/reports/anchore/**/*.*'
              }
            }
          }
        }
        stage('Trivy') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              script {
                env.TRIVY_RESULT = sh(script:'bob -r ci/rulesets/va-rules.yaml trivy-scan', returnStatus: true)
                archiveArtifacts '.bob/reports/trivy/**/*.*'
              }
            }
          }
        }
        stage('Xray') {
          steps {
            withCredentials([usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI')]) {
              catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                script {
                  env.XRAY_RESULT = sh(script: 'bob -r ci/rulesets/va-rules.yaml fetch-xray-report', returnStatus: true)
                  archiveArtifacts '.bob/reports/xray/**/*.*'
                  archiveArtifacts '.bob/reports/xray-raw/**/*.*'
                }
              }
            }
          }
        }
        stage('CIS-CAT') {
          steps {
            withCredentials([usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI')]) {
              catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                script {
                  env.CIS_CAT_RESULT = sh(script:  'bob -r ci/rulesets/va-rules.yaml cis-cat-scan', returnStatus: true)
                  archiveArtifacts '.bob/reports/cis-cat/**/*.*'
                }
              }
            }
          }
        }
        stage('Kubeaudit scan') {
          steps {
            lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
              withCredentials([file(credentialsId: env.system, variable: 'KUBECONFIG')
              ]) {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  script {
                    env.KUBEAUDIT_RESULT = sh(script:  'bob -r ci/rulesets/va-rules.yaml kubeaudit-scan', returnStatus: true)
                    archiveArtifacts artifacts: '.bob/reports/kubeaudit/**', allowEmptyArchive: true
                  }
                }
              }
            }
          }
        }
        stage('Kubesec scan') {
          steps {
            lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
              withCredentials([file(credentialsId: env.system, variable: 'KUBECONFIG')
              ]) {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  script {
                    env.KUBESEC_RESULT = sh(script: 'bob -r ci/rulesets/va-rules.yaml kubesec-scan', returnStatus: true)
                    archiveArtifacts '.bob/reports/kubesec/**'
                  }
                }
              }
            }
          }
        }
      }
    }
    stage('Cleanup images') {
      steps {
        sh 'bob -r ci/rulesets/va-rules.yaml cleanup'
      }
    }
    stage('ZAP scan') {
      steps {
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([
            usernamePassword(credentialsId: 'arm-sero-eeaprodart-token', usernameVariable: 'ARM_USER_SERO', passwordVariable: 'ARM_TOKEN_SERO'),
            file(credentialsId: env.system, variable: 'KUBECONFIG')
          ]) {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              script {
                env.ZAP_RESULT = sh(script:  'bob -r ci/rulesets/va-rules.yaml zap-scan', returnStatus: true)
                archiveArtifacts '.bob/reports/zap/**/*.*'
              }
            }
          }
        }
      }
    }
    stage('Nmap scan') {
      steps {
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([
            usernamePassword(credentialsId: 'arm-sero-eeaprodart-token', usernameVariable: 'ARM_USER_SERO', passwordVariable: 'ARM_TOKEN_SERO'),
            file(credentialsId: env.system, variable: 'KUBECONFIG')
          ]) {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              script {
                env.NMAP_RESULT = sh(script: 'bob -r ci/rulesets/va-rules.yaml nmap-scan', returnStatus: true)
                archiveArtifacts '.bob/reports/nmap/**/*.*'
              }
            }
          }
        }
      }
    }
    stage('Fuzz scan') {
          steps {
            lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
              withCredentials([
            usernamePassword(credentialsId: 'arm-sero-eeaprodart-token', usernameVariable: 'ARM_USER_SERO', passwordVariable: 'ARM_TOKEN_SERO'),
            file(credentialsId: env.system, variable: 'KUBECONFIG')
            ]) {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  script {
                    env.FUZZ_RESULT = sh(script: 'bob -r ci/rulesets/va-rules.yaml fuzz-test', returnStatus: true)
                    archiveArtifacts '.bob/reports/defensics/**/*.*'
                  }
                }
            }
            }
          }
    }
    stage('Cleanup namespace') {
      steps {
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([file(credentialsId: env.system, variable: 'KUBECONFIG')]) {
            ansiColor('xterm') {
              sh 'bob namespace-cleanup'
            }
          }
        }
      }
    }
    stage('Generate and upload VA report') {
      steps {
        withCredentials([string(credentialsId: 'gas-vulnhub-api-token', variable: 'VHUB_TOKEN')]) {
          catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            sh 'bob -r ci/rulesets/va-rules.yaml generate-upload-VA-report'
            archiveArtifacts '.bob/reports/**_va-report.md'
          }
        }
      }
    }
    stage('Generate aggregated vulnerability result') {
      steps {
        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
          sh 'bob -r ci/rulesets/va-rules.yaml generate-aggregated-vuln-list'
          archiveArtifacts '.bob/reports/aggregated-vulns.yaml'
        }
      }
    }
    stage('Manage open Vulnerability Tickets') {
      when { expression { env.MANAGE_JIRA == 'true' } }
      steps {
        withCredentials([string(credentialsId: 'jira-eceaconfl-token', variable: 'JIRA_API_TOKEN')]) {
          catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            script {
              env.MITIGATION_CHANGE_TYPE = sh(
                script:'bob -r ci/rulesets/va-rules.yaml manage-jira-cards',
                returnStatus: true
              )
              if (env.MITIGATION_CHANGE_TYPE == '3') {
                sh 'exit 1'
              }
            }
            archiveArtifacts '.bob/reports/finalized_mitigations.yaml'
          }
        }
      }
    }
    stage('Upload reports to ARM') {
      when { expression { env.UPLOAD_ARM == 'true' } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI')]) {
          catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            sh 'bob -r ci/rulesets/va-rules.yaml upload-reports-to-arm'
          }
        }
      }
    }
    stage('Upload VA report to Eridoc') {
      when { expression { env.UPLOAD_ERIDOC == 'true' } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'eridoc-username-password', usernameVariable: 'ERIDOC_USERNAME', passwordVariable: 'ERIDOC_PASSWORD')]) {
          catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            sh 'bob -r ci/rulesets/va-rules.yaml upload-va-report-to-eridoc'
          }
        }
      }
    }
    stage('Evaluate the VA status') {
      // This is non-essential, just a preparation for having to evaluate non-zero return codes differently for the tools
      when {
        expression {
          env.ANCHORE_RESULT != '0' ||
          env.TRIVY_RESULT != '0' ||
          env.XRAY_RESULT != '0' ||
          env.CIS_CAT_RESULT != '0' ||
          env.KUBEAUDIT_RESULT != '0' ||
          env.KUBESEC_RESULT != '0' ||
          env.ZAP_RESULT != '0' ||
          env.NMAP_RESULT != '0' ||
          env.FUZZ_RESULT != '0'
        }
      }
      steps {
        sh 'exit 1'
      }
    }
  }
  post {
    always {
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: '.bob/reports/zap',
        reportFiles: 'backend_api.html',
        reportName: 'WS ZAP Scanning Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: '.bob/reports/zap',
        reportFiles: 'ui_api.html',
        reportName: 'UI ZAP Scanning Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: '.bob/reports/zap',
        reportFiles: 'ui-logging_api.html',
        reportName: 'UI-Logging ZAP Scanning Report'
      ])
      script {
        if (env.MANAGE_JIRA == 'true') {
          if (env.MITIGATION_CHANGE_TYPE == '1') {
            mail to: 'PDLSCRUMNW@pdl.internal.ericsson.com',
            subject: "New Vulnerabilities found: ${currentBuild.fullDisplayName}",
            body: "Found Vulnerabilities without mitigation: ${env.BUILD_URL}artifact/.bob/reports/finalized_mitigations.yaml"
          } else if (env.MITIGATION_CHANGE_TYPE == '2') {
            mail to: 'PDLSCRUMNW@pdl.internal.ericsson.com',
            subject: "Found Solved Vulnerabilities: ${currentBuild.fullDisplayName}",
            body: "Found Solved Vulnerabilities: ${env.BUILD_URL}artifact/.bob/reports/finalized_mitigations.yaml"
          } else if (env.MITIGATION_CHANGE_TYPE == '3') {
            mail to: 'PDLSCRUMNW@pdl.internal.ericsson.com',
            subject: "VA Pipeline Failed: ${currentBuild.fullDisplayName}",
            body: "Could not complete Jira Action(s): ${env.BUILD_URL}"
          }
        }
      }
    }
    failure {
      mail to: 'f98b007c.ericsson.onmicrosoft.com@emea.teams.ms',
      subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
      body: "Failure on ${env.BUILD_URL}"
    }
  }
}
