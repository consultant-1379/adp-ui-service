def stageIsActived() {
  return env.RUN_STAGES == 'all' || env.RUN_STAGES.split(',').contains(env.STAGE_NAME)
}

pipeline {
  agent {
    node('presentation')
  }
  options {
    ansiColor('xterm')
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }
  parameters {
    string(name: 'RELEASE_CANDIDATE', description: 'The helm chart release candidate version (e.g. 1.0.0-7)')
    choice(name: 'VERSION_UPDATE', choices: ['MINOR', 'PATCH', 'MAJOR'], description: 'Type of release version update (e.g. MAJOR, MINOR, PATCH)')
    booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Enable dry-run')
    string(name: 'RUN_STAGES',
      description: 'Define the stage names which should be executed as a comma separated list. "all" means to run everything',
      defaultValue: 'all')
  }
  stages {
    stage('Cleanup') {
      steps {
        sh 'bob clean'
      }
    }
    stage('Init') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI'),
          usernamePassword(credentialsId: 'arm-sero-eeaprodart-token', usernameVariable: 'ARM_USER_SERO', passwordVariable: 'ARM_TOKEN_SERO')
        ]) {
          sh 'bob -r ci/rulesets/release-rules.yaml init'
        }
        archiveArtifacts 'artifact.properties'
      }
    }
    stage('Validate Structured Data with Drop Artifacts') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI'),
        ]) {
          sh 'bob -r ci/rulesets/release-rules.yaml validate-structured-data-drop'
        }
      }
    }
    stage('Install npm dependencies') {
      when { expression { stageIsActived() } }
      steps {
        sh 'bob npm-install'
      }
    }
    stage('Publish released Docker Images') {
      when { expression { env.DRY_RUN == 'false' && stageIsActived() } }
      steps {
        // Push docker images to -released docker repository
        sh 'bob -r ci/rulesets/release-rules.yaml publish-released-docker-image'
      }
    }
    stage('Publish released helm chart') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI')
        ]) {
          // Repackage and Upload helm chart to -released helm chart repository
          sh 'bob -r ci/rulesets/release-rules.yaml publish-released-helm-chart'
        }
      }
    }
    stage('Fetch artifact checksums') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI')
        ]) {
          sh 'bob -r ci/rulesets/release-rules.yaml fetch-artifact-checksums'
        }
      }
    }
    stage('Prepare FOSS dependencies') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([string(credentialsId: 'evms-product-instance-token', variable: 'EVMS_API_KEY')]) {
          sh 'bob foss-analyze:enrich' //If there is any issues with fossa, or munin, then this could be used temporary
          sh 'bob foss-helper:merge-dependencies'
        }
      }
    }
    stage('Register to EVMS') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([string(credentialsId: 'evms-product-instance-token', variable: 'EVMS_API_KEY')]) {
          sh 'bob -r ci/rulesets/release-rules.yaml evms-registration'
        }
      }
    }
    stage('Set artifact in Munin') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([
          string(credentialsId: 'mimer-token-production', variable: 'MUNIN_TOKEN'),
          usernamePassword(credentialsId: 'gitca-functional-http-user', usernameVariable: 'GITCA_USERNAME', passwordVariable: 'GITCA_PASSWORD'),
          usernamePassword(credentialsId: 'aca-functional-http-user', usernameVariable: 'ACA_USERNAME', passwordVariable: 'ACA_PASSWORD')
        ]) {
          sh 'bob -r ci/rulesets/release-rules.yaml munin-set-artifact'
        }
      }
    }
    stage('Auto approve Eridoc documents') {
      when { expression { env.DRY_RUN == 'false' && stageIsActived() } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'eridoc-username-password', usernameVariable: 'ERIDOC_USERNAME', passwordVariable: 'ERIDOC_PASSWORD')]) {
          sh 'bob eridoc-approve'
        }
      }
    }
    stage('Get approved document versions') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([
          string(credentialsId: 'mimer-token-production', variable: 'MUNIN_TOKEN'),
          usernamePassword(credentialsId: 'eridoc-username-password', usernameVariable: 'ERIDOC_USERNAME', passwordVariable: 'ERIDOC_PASSWORD')
        ]) {
          sh 'bob -r ci/rulesets/release-rules.yaml get-approved-document-versions'
        }
      }
    }
    stage('Generate PRI and approve it') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'eridoc-username-password', usernameVariable: 'ERIDOC_USERNAME', passwordVariable: 'ERIDOC_PASSWORD'),
          usernamePassword(credentialsId: 'git-functional-http-user', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
          string(credentialsId: 'jira-eceaconfl-token', variable: 'JIRA_TOKEN')
        ]) {
          sh 'bob generate-pri'
        }
      }
    }
    stage('Register artifacts in ACA') {
      when { expression { env.DRY_RUN == 'false' && stageIsActived() } }
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'aca-functional-http-user', usernameVariable: 'ACA_USERNAME', passwordVariable: 'ACA_PASSWORD')
        ]) {
          // Upload and register artifacts in aca
          sh 'bob -r ci/rulesets/release-rules.yaml upload-and-register-artifacts-in-aca'
        }
      }
    }
    stage('Release product') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([string(credentialsId: 'mimer-token-production', variable: 'MUNIN_TOKEN')]) {
          sh 'bob -r ci/rulesets/release-rules.yaml release-version'
        }
      }
    }
    stage('Create bookmarks') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([string(credentialsId: 'mimer-token-production', variable: 'MUNIN_TOKEN')]) {
          sh 'bob -r ci/rulesets/release-rules.yaml create-bookmarks'
        }
      }
    }
    stage('Generate and update docs to ARM and marketplace') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI'),
          usernamePassword(credentialsId: 'arm-sero-eeaprodart-token', usernameVariable: 'ARM_USER_SERO', passwordVariable: 'ARM_TOKEN_SERO'),
        ]) {
          // 'Get approved document versions' is a prerequisite step
          sh 'bob -r ci/rulesets/release-rules.yaml publish-marketplace-docs'
        }
      }
    }
    stage('Create PRA Git Tag') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'git-functional-http-user', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')]) {
          // Create git tag 'v<released version>'
          sh 'bob -r ci/rulesets/release-rules.yaml create-pra-git-tag'
        }
      }
    }
    stage('Increment version prefix') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'git-functional-http-user', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')]) {
          // Step minor version in VERSION_PREFIX (e.g. 1.1.0 -> 1.2.0)
          sh 'bob -r ci/rulesets/release-rules.yaml increment-version-prefix'
        }
      }
    }
    stage('Update Changelog') {
      when { expression { stageIsActived() } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'git-functional-http-user', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')]) {
          sh 'bob -r ci/rulesets/release-rules.yaml update-changelog'
        }
      }
    }
    stage('Email') {
      when { expression { env.DRY_RUN == 'false' } }
      steps {
        script {
          def exists = fileExists 'build/pra_release_email.html'
          if (exists) {
            message = readFile('build/pra_release_email.html')
            VERSION = sh(returnStdout: true, script: 'cat .bob/var.semver').trim()
            mail body: message, subject:"Lightweight GUI Aggregator - $VERSION, PRA Release", to: 'PDLSCRUMNW@pdl.internal.ericsson.com', mimeType: 'text/html'
          } else {
            echo 'No release contents found for notifying. Email sending aborted...'
          }
        }
      }
    }
    stage('Stop in case of dry-run') {
      when { expression { env.DRY_RUN == 'true' } }
      steps {
        error('Build is failed because the spinnaker pipeline should not be triggered in case of dry-run')
      }
    }
  }
  post {
    cleanup {
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker stop"
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker rm"
    }
    failure {
      mail to: 'f98b007c.ericsson.onmicrosoft.com@emea.teams.ms',
      subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
      body: "Failure on ${env.BUILD_URL}"
    }
  }
}
