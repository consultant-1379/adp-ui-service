pipeline {
  agent {
    node('presentation')
  }

  options {
    ansiColor('xterm')
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }

  stages {
    stage('Prepare') {
      steps {
        sh 'bob --help'
      }
    }
    stage('3pp-handling') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'git-functional-http-user', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
          string(credentialsId: 'scasuser-token', variable: 'SCAS_TOKEN'),
          string(credentialsId: 'mimer-token-production', variable: 'MUNIN_TOKEN')
        ]) {
          catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            ansiColor('xterm') {
              sh 'bob -r ci/rulesets/auto-3pp-handler-rules.yaml init'
            }
          }
        }
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: '.bob/munin-sync-status-files/*.json', allowEmptyArchive: true
    }
    cleanup {
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker stop"
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker rm"
    }
  }
}
